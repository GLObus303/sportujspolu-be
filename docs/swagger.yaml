basePath: /api/v1
definitions:
  models.EmailRequest:
    properties:
      approved:
        example: false
        type: boolean
      approvedAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      createdAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      eventId:
        example: pwnrxtbi9z0v
        type: string
      eventOwnerId:
        example: pwnrxtbi9z0v
        type: string
      id:
        example: 1
        type: integer
      requesterId:
        example: pwnrxtbi9z0v
        type: string
      text:
        example: I would like to join your event.
        type: string
      updatedAt:
        example: "2023-11-03T10:15:30Z"
        type: string
    type: object
  models.EmailRequestApproveInput:
    properties:
      approved:
        example: true
        type: boolean
    type: object
  models.EmailRequestApproveResponse:
    properties:
      approved:
        example: false
        type: boolean
      approvedAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      createdAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      eventId:
        example: pwnrxtbi9z0v
        type: string
      eventOwnerId:
        example: pwnrxtbi9z0v
        type: string
      id:
        example: 1
        type: integer
      requesterEmail:
        example: example@domain.com
        type: string
      requesterId:
        example: pwnrxtbi9z0v
        type: string
      text:
        example: I would like to join your event.
        type: string
      updatedAt:
        example: "2023-11-03T10:15:30Z"
        type: string
    type: object
  models.EmailRequestInput:
    properties:
      eventId:
        example: pwnrxtbi9z0v
        type: string
      text:
        type: string
    type: object
  models.EmailRequestResponse:
    properties:
      approved:
        example: false
        type: boolean
      approvedAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      createdAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      eventId:
        example: pwnrxtbi9z0v
        type: string
      eventName:
        example: Sample Event
        type: string
      eventOwnerEmail:
        example: email@test.com
        type: string
      eventOwnerId:
        example: pwnrxtbi9z0v
        type: string
      eventOwnerName:
        example: Owner Name
        type: string
      id:
        example: 1
        type: integer
      requesterId:
        example: pwnrxtbi9z0v
        type: string
      text:
        example: I would like to join your event.
        type: string
      updatedAt:
        example: "2023-11-03T10:15:30Z"
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Event:
    properties:
      createdAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      date:
        example: "2023-11-03T10:15:30Z"
        type: string
      description:
        example: Example Description
        type: string
      id:
        example: pwnrxtbi9z0v
        type: string
      level:
        example: Any
        type: string
      location:
        example: Central Park
        type: string
      name:
        example: Basketball Match at Park
        type: string
      ownerId:
        example: pwnrxtbi9z0v
        type: string
      price:
        example: 123
        type: integer
      sport:
        example: Basketball
        type: string
    type: object
  models.EventInput:
    properties:
      date:
        example: "2023-11-03T10:15:30Z"
        type: string
      description:
        example: Example Description
        type: string
      level:
        example: Any
        type: string
      location:
        example: Central Park
        type: string
      name:
        example: Basketball Match at Park
        type: string
      price:
        example: 123
        type: integer
      sport:
        example: Basketball
        type: string
    type: object
  models.EventWithOwner:
    properties:
      createdAt:
        example: "2023-11-03T10:15:30Z"
        type: string
      date:
        example: "2023-11-03T10:15:30Z"
        type: string
      description:
        example: Example Description
        type: string
      id:
        example: pwnrxtbi9z0v
        type: string
      level:
        example: Any
        type: string
      location:
        example: Central Park
        type: string
      name:
        example: Basketball Match at Park
        type: string
      owner:
        additionalProperties:
          type: string
        example:
          email: email@test.com
          id: pwnrxtbi9z0v
          name: John Doe
          rating: "3"
        type: object
      ownerId:
        example: pwnrxtbi9z0v
        type: string
      price:
        example: 123
        type: integer
      sport:
        example: Basketball
        type: string
    type: object
  models.Level:
    properties:
      id:
        example: 1
        type: integer
      label:
        example: Beginner
        type: string
      value:
        example: beginner
        type: string
    type: object
  models.PublicUser:
    properties:
      email:
        example: email@test.com
        type: string
      id:
        example: pwnrxtbi9z0v
        type: string
      name:
        example: John Doe
        type: string
      rating:
        example: 3
        type: integer
    type: object
  user.LoginInput:
    properties:
      email:
        example: email@test.com
        type: string
      password:
        example: Test123
        type: string
    required:
    - email
    - password
    type: object
  user.RegisterInput:
    properties:
      email:
        example: email@test.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: Test123
        type: string
    required:
    - email
    - name
    - password
    type: object
host: sportujspolu-api.onrender.com
info:
  contact: {}
  description: This is the API for the SportujSpolu app.
  title: SportujSpolu API
  version: "1.0"
paths:
  /events:
    get:
      description: Retrieve all events from the database
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 12
        description: Number of events per page
        in: query
        name: limit
        type: integer
      - description: Include additional details
        enum:
        - owner
        in: query
        name: includes
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EventWithOwner'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Creates a new event in the database
      parameters:
      - description: Event object
        in: body
        name: newEvent
        required: true
        schema:
          $ref: '#/definitions/models.EventInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{eventId}:
    delete:
      description: Delete an existing event with the given event ID
      parameters:
      - description: Event ID
        example: q76j5d1a3xtn
        in: path
        name: eventId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an event
      tags:
      - events
    get:
      description: Retrieves a single event from the database
      parameters:
      - description: Event ID
        example: q76j5d1a3xtn
        in: path
        name: eventId
        required: true
        type: string
      - description: Include additional details
        enum:
        - owner
        in: query
        name: includes
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventWithOwner'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a single event
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an existing event with the given event ID
      parameters:
      - description: Event ID
        example: q76j5d1a3xtn
        in: path
        name: eventId
        required: true
        type: string
      - description: Event object that needs to be updated
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.EventInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an event
      tags:
      - events
  /messages/email/{id}/approve:
    patch:
      consumes:
      - application/json
      description: Approves an email request for a given ID
      parameters:
      - default: 1
        description: Email Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Approval status
        in: body
        name: approveInput
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequestApproveInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmailRequestApproveResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Approve an email request
      tags:
      - messages
  /messages/email/received-owner-requests:
    get:
      description: Retrieve all email requests for owner from the database
      parameters:
      - default: "null"
        description: Approved filter
        enum:
        - "true"
        - "false"
        - "null"
        in: query
        name: approvedFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of email requests
          schema:
            items:
              $ref: '#/definitions/models.EmailRequestResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all email requests received as owner
      tags:
      - messages
  /messages/email/request:
    post:
      consumes:
      - application/json
      description: Sends an email request to join an event
      parameters:
      - description: Email Request object
        in: body
        name: newEmailRequest
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequestInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmailRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Send an email request
      tags:
      - messages
  /messages/email/sent-user-requests:
    get:
      description: Retrieve all email requests for user from the database
      parameters:
      - default: "null"
        description: Approved filter
        enum:
        - "true"
        - "false"
        - "null"
        in: query
        name: approvedFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of email requests
          schema:
            items:
              $ref: '#/definitions/models.EmailRequestResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all email requests send as user
      tags:
      - messages
  /references/levels:
    get:
      description: Retrieves all levels from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Level'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all levels
      tags:
      - levels
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with the provided credentials
      parameters:
      - description: Login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: User login
      tags:
      - user
  /user/me:
    delete:
      description: Deletes the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete current user
      tags:
      - user
    get:
      description: Gets the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PublicUser'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided details
      parameters:
      - description: Registration details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Register a new user
      tags:
      - user
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
